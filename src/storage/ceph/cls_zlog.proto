syntax = "proto2";
option optimize_for = SPEED;
package zlog_ceph_proto;

// metadata for objects linking to head object
message LinkObjectHeader {
  required string hoid = 1;
}

//##########################
// metadata for head objects
//##########################

message UniqueId {
  required uint64 id = 1;
}

message HeadObjectHeader {
  required uint64 epoch = 1;
  required string prefix = 2;
}

message InitHead {
  required string prefix = 1;
}

message CreateView {
  required uint64 epoch = 1;
  required bytes data = 2;
}

message ReadView {
  required uint64 epoch = 1;
  optional uint32 max_views = 2 [default = 100];
}

// store data in this
message View {
  required uint64 epoch = 1;
  required bytes data = 2;
}

message Views {
  repeated View views = 1;
}

//#########################################
// metadata for objects storing log entries
//#########################################

message LogObjectHeader {
  required uint64 epoch = 1;
  optional uint64 max_pos = 2;
}

message LogEntry {
  optional bool invalid = 1 [default = false];

  // log entry data is stored in exactly one of two places: inline with this log
  // entry metadata (the data field) or in the object (offset/length fields).
  optional bytes data = 2;
  optional uint32 offset = 3;
  optional uint32 length = 4;
}

//##########################################
// operations on objects storing log entries
//##########################################

message ReadMaxPos {
  required uint64 epoch = 1;
}

message MaxPos {
  optional uint64 pos = 1;
}

message InitEntry {
  required uint64 epoch = 1;
}

message Seal {
  required uint64 epoch = 1;
}

message WriteEntry {
  required uint64 epoch = 1;
  required uint64 pos = 2;
  required bytes data = 5;
}

message ReadEntry {
  required uint64 epoch = 1;
  required uint64 pos = 2;
}

message InvalidateEntry {
  required uint64 epoch = 1;
  required uint64 pos = 2;
  required bool force = 3;
}

syntax = "proto2";

package zlog_proto;

option optimize_for = SPEED;

message MultiStripe {
  // the base stripe id. the id of the i^th stripe instance is base_id + (i-1).
  // the next_stripe_id that is tracked in the view structure is updated to
  // reflect the existence of the implicit stripe instances.
  required uint64 base_id = 1;

  // number of objects per stripe
  required uint32 width = 2;

  // number of log entries per object
  required uint32 slots = 3;

  // the number of consecutive repeats of this stripe. for example if the value
  // is two, then the configuration of the containing view behaves as if this
  // stripe is explicitly represented twice. this is used to collapse / compress
  // the view as the log and space of mapped positions grow. increasing the
  // number of instances increases the "max_position" (below).
  required uint32 instances = 4;

  // the min position mapped by this stripe (inclusive)
  required uint64 min_position = 5;

  // the max position mapped by this stripe (inclusive)
  required uint64 max_position = 6;
}

message Sequencer {
  required uint64 epoch = 1;
  required string secret = 2;
  required uint64 position = 3;
}

message View {
  optional uint64 next_stripe_id = 1 [default = 0];
  repeated MultiStripe stripes = 2;
  optional Sequencer seq = 3;
  required uint64 min_valid_position = 4;
}

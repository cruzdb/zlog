namespace zlog.fbs;

table MultiStripe {
  // the base stripe id. the id of the i^th stripe instance is base_id + (i-1).
  // the next_stripe_id that is tracked in the view structure is updated to
  // reflect the existence of the implicit stripe instances.
  base_id:uint64;

  // number of objects per stripe
  width:uint32;

  // number of log entries per object
  slots:uint32;

  // the number of consecutive repeats of this stripe. for example if the value
  // is two, then the configuration of the containing view behaves as if this
  // stripe is explicitly represented twice. this is used to collapse / compress
  // the view as the log and space of mapped positions grow. increasing the
  // number of instances increases the "max_position" (below).
  instances:uint64;

  // the min position mapped by this stripe (inclusive)
  min_position:uint64;

  // the max position mapped by this stripe (inclusive)
  max_position:uint64;
}

table ObjectMap {
  next_stripe_id:uint64;
  stripes:[MultiStripe];
  min_valid_position:uint64;
}

table Sequencer {
  epoch:uint64;
  secret:string;
  position:uint64;
}

table View {
  object_map:ObjectMap;
  sequencer:Sequencer;
}
